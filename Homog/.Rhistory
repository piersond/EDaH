locationData <- read_key_location(key_path)
profileData <- read_key_profile(key_path)
notes <- build_key_notes(key_path, locationData, profileData)
unitsConversions <- get_unit_conversions(key_path)
conversionNotes <- build_unitConv_notes()
LDU_UCL <- locationData_to_convert(locationData, unitsConversions)
locUnitsConverted <- apply_locData_UnitConv(locationData, LDU_UCL, conversionNotes)
locationData <- as.data.frame(locUnitsConverted[[1]])
conversion_Notes <- as.data.frame(locUnitsConverted[[2]]) #output is notes
locationDataQC_Notes <- locationData_QC(locationData) #output is notes
data_to_homog <- collect_data_to_homog(data_dir, locationData)
data_to_homog_lvls <- add_exp_trt_levels(data_to_homog, profileData)
# <br>
#
# #### ****
#
#
# Input:
#
# Output:
#DEBUG
df_in = data_to_homog
profileData = profileData
experimentTreatmentVarSet <- c(
"L1",
"L2",
"L3",
"L4",
"L5",
"L6",
"tx_L1",
"tx_L2",
"tx_L3",
"tx_L4",
"tx_L5",
"tx_L6"
)
profileDataExpTrt <- profileData %>%
filter(
var %in% experimentTreatmentVarSet,
var %in% colnames(df_in)
) %>%
mutate(var_level = paste0(var, "_level")) %>%
select(unit_levels, var, var_level)
profileDataExpTrt
# loop through a given frame to add the corresponding levels for each
# experiment or treatment variable
for (i in 1:nrow(profileDataExpTrt)) {
newColName <- profileDataExpTrt[i,][['var_level']]
newColValue <- profileDataExpTrt[i,][['unit_levels']]
newPosition <- profileDataExpTrt[i,][['var']]
frame <- add_column(
.data = df_in,
!!newColName := newColValue,
.after = newPosition
)
} # close loop
#DEBUG
i = 1
newColName <- profileDataExpTrt[i,][['var_level']]
newColValue <- profileDataExpTrt[i,][['unit_levels']]
newPosition <- profileDataExpTrt[i,][['var']]
frame <- add_column(
.data = df_in,
!!newColName := newColValue,
.after = newPosition
)
newColValue
profileDataExpTrt[i,][['unit_levels']]
profileDataExpTrt[i,][['var_level']]
profileDataExpTrt[i,][['var']]
profileDataExpTrt <- profileData %>%
filter(
var %in% experimentTreatmentVarSet,
var %in% colnames(df_in)
)
profileDataExpTrt
profileDataExpTrt <- profileData
profileDataExpTrt
colnames(df_in)
var
profileDataExpTrt <- profileData %>%
filter(
var %in% experimentTreatmentVarSet)
profileDataExpTrt
googleDirData <- lapply(googleDirData, function(frame) {
setNames(frame, profileData$var[match(names(frame), profileData$header_name)]) })
profData <- lapply(profileData, function(frame) {
setNames(frame, profileData$var[match(names(frame), profileData$header_name)]) })
View(profData)
profileDataExpTrt <- profileData %>%
filter(
var %in% experimentTreatmentVarSet,
var %in% colnames(profData)
) %>%
mutate(var_level = paste0(var, "_level")) %>%
select(unit_levels, var, var_level)
profileDataExpTrt
colnames(profData)
profData <- lapply(profileData, function(frame) {
setNames(frame, profileData$var[match(names(frame), profileData$header_name)]) })
profileData$header_name
View(profData)
profileDataExpTrt <- profileData %>%
filter(
var %in% experimentTreatmentVarSet,
) %>%
mutate(var_level = paste0(var, "_level")) %>%
select(unit_levels, var, var_level)
profileDataExpTrt
# loop through a given frame to add the corresponding levels for each
# experiment or treatment variable
for (i in 1:nrow(profileDataExpTrt)) {
#DEBUG
#i = 1
newColName <- profileDataExpTrt[i,][['var_level']]
newColValue <- profileDataExpTrt[i,][['unit_levels']]
newPosition <- profileDataExpTrt[i,][['var']]
frame <- add_column(
.data = df_in,
!!newColName := newColValue,
.after = newPosition
)
} # close loop
View(df_in)
#DEBUG
df_in = data_to_homog
profileData = profileData
profData <- lapply(profileData, function(frame) {
setNames(frame, profileData$var[match(names(frame), profileData$header_name)]) })
experimentTreatmentVarSet <- c(
"L1",
"L2",
"L3",
"L4",
"L5",
"L6",
"tx_L1",
"tx_L2",
"tx_L3",
"tx_L4",
"tx_L5",
"tx_L6"
)
profileDataExpTrt <- profileData %>%
filter(
var %in% experimentTreatmentVarSet,
) %>%
mutate(var_level = paste0(var, "_level")) %>%
select(unit_levels, var, var_level)
# loop through a given frame to add the corresponding levels for each
# experiment or treatment variable
for (i in 1:nrow(profileDataExpTrt)) {
#DEBUG
#i = 1
newColName <- profileDataExpTrt[i,][['var_level']]
newColValue <- profileDataExpTrt[i,][['unit_levels']]
newPosition <- profileDataExpTrt[i,][['var']]
profData <- add_column(
.data = profData,
!!newColName := newColValue,
.after = newPosition
)
} # close loop
View(profData)
#DEBUG
i = 1
newColName <- profileDataExpTrt[i,][['var_level']]
newColValue <- profileDataExpTrt[i,][['unit_levels']]
newPosition <- profileDataExpTrt[i,][['var']]
profileDataExpTrt[i,][['var']]
View(df_in)
View(df_in)
df_in <- add_column(
.data = profData,
!!newColName := newColValue,
.after = newPosition
)
View(df_in)
View(profileDataExpTrt)
?add_column
profileDataExpTrt[i,][['var']]
profileDataExpTrt[i,][['unit_levels']]
profileDataExpTrt[i,][['var_level']]
profileDataExpTrt[i,][['var_level']]
profileDataExpTrt
View(profileData)
profileDataExpTrt <- profileData %>%
filter(
var %in% experimentTreatmentVarSet,
) %>%
mutate(var_level = paste0(var, "_level")) %>%
select(unit_levels, var, var_level, header_name)
profileDataExpTrt
df_in = data_to_homog
profileData = profileData
profData <- lapply(profileData, function(frame) {
setNames(frame, profileData$var[match(names(frame), profileData$header_name)]) })
experimentTreatmentVarSet <- c(
"L1",
"L2",
"L3",
"L4",
"L5",
"L6",
"tx_L1",
"tx_L2",
"tx_L3",
"tx_L4",
"tx_L5",
"tx_L6"
)
profileDataExpTrt <- profileData %>%
filter(
var %in% experimentTreatmentVarSet,
) %>%
mutate(var_level = paste0(var, "_level")) %>%
select(unit_levels, var, var_level, header_name)
profileDataExpTrt
nrow(profdata)
profData <- lapply(profileData, function(frame) {
setNames(frame, profileData$var[match(names(frame), profileData$header_name)]) })
profData
nrow(profiledata)
nrow(profileData)
View(profileData)
#create treatment level dataframe to join with profileData
trt_lvls_df <- NULL
?`:=`
i=1
row_to_df <- dataframe(col1 = rep(profileDataExpTrt[i,1], nrow(df_in)))
row_to_df <- data.frame(col1 = rep(profileDataExpTrt[i,1], nrow(df_in)))
View(row_to_df)
row_to_df <- data.frame(col1 = rep(profileDataExpTrt[i,1], nrow(df_in)),
col2 = rep(profileDataExpTrt[i,1], nrow(df_in)))
View(row_to_df)
rep(profileDataExpTrt[i,1], nrow(df_in)
)
row_to_df <- data.frame(col1 = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)),
col2 = rep(profileDataExpTrt[i,1], nrow(df_in)))
View(row_to_df)
row_to_df <- data.frame(col1 = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)),
col2 = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
View(row_to_df)
#create treatment level dataframe to join with profileData
trt_lvls_df <- NULL
for(i in 1:nrow(profileDataExpTrt)) {
row_to_df <- data.frame(col1 = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
colnames(row_to_df) <- profileDataExpTrt[i,3]
trt_lvls_df <- rbind(trt_lvls_df, row_to_df)
}
View(trt_lvls_df)
#create treatment level dataframe to join with profileData
trt_lvls_df <- NULL
#create treatment level dataframe to join with profileData
trt_lvls_df <- NULL
for(i in 1:nrow(profileDataExpTrt)) {
row_to_df <- data.frame(col1 = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
colnames(row_to_df) <- profileDataExpTrt[i,3]
trt_lvls_df <- rbind(trt_lvls_df, row_to_df)
}
#create treatment level dataframe to join with profileData
trt_lvls_df <- NULL
for(i in 1:nrow(profileDataExpTrt)) {
row_to_df <- data.frame(col1 = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
colnames(row_to_df) <- profileDataExpTrt[i,3]
trt_lvls_df <- rbind(trt_lvls_df, row_to_df)
}
#create treatment level dataframe to join with profileData
trt_lvls_df <- NULL
for(i in 1:nrow(profileDataExpTrt)) {
row_to_df <- data.frame(col1 = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
colnames(row_to_df) <- profileDataExpTrt[i,3]
trt_lvls_df <- cbind(trt_lvls_df, row_to_df)
}
nrow(profileDataExpTrt)
i=1
row_to_df <- data.frame(col1 = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
colnames(row_to_df) <- profileDataExpTrt[i,3]
row_to_df
i=2
row_to_df <- data.frame(col1 = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
colnames(row_to_df) <- profileDataExpTrt[i,3]
row_to_df
trt_lvls_df <- full_join(trt_lvls_df, row_to_df)
trt_lvls_df <- left_join(trt_lvls_df, row_to_df)
#create treatment level dataframe to join with profileData
trt_lvls_df <- NULL
profileDataExpTrt[i,2])
profileDataExpTrt[i,4]
i=1
profileDataExpTrt[i,4]
df_in[profileDataExpTrt[i,4]]
df_in[[profileDataExpTrt[i,4]]
row_to_df <- data.frame(col1 = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
colnames(row_to_df) <- profileDataExpTrt[i,3]
trt_lvls_df <- left_join(trt_lvls_df, row_to_df)
}
# loop through a given frame to add the corresponding levels for each
# experiment or treatment variable
for (i in 1:nrow(profileDataExpTrt)) {
#DEBUG
i = 1
newColName <- profileDataExpTrt[i,][['var_level']]
newColValue <- profileDataExpTrt[i,][['unit_levels']]
newPosition <- profileDataExpTrt[i,][['var']]
)
} # close loop
return(df_in)
}
df_in[[profileDataExpTrt[i,4]]
df_in[[profileDataExpTrt[i,4]]]
df_in[[as.character(profileDataExpTrt[i,4])]]
i =2
row_to_df <- data.frame(col1 = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
colnames(row_to_df) <- profileDataExpTrt[i,3]
profileDataExpTrt[i,3]
#create treatment level dataframe to join with profileData
trt_lvls_df <- NULL
for(i in 1:nrow(profileDataExpTrt)) {
if(i == 1) {
trt_lvls_df$L1 = df_in[[as.character(profileDataExpTrt[i,4])]]
trt_lvls_df$L1_level = df_in[[as.character(profileDataExpTrt[i,1])]]
} else {
}
i = 2
row_to_df <- data.frame(data = df_in[[as.character(profileDataExpTrt[i,4])]],
level = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
colnames(row_to_df) <- c(as.character(profileDataExpTrt[i,1]), as.character(profileDataExpTrt[i,3]))
trt_lvls_df <- left_join(trt_lvls_df, row_to_df)
}
#create treatment level dataframe to join with profileData
trt_lvls_df <- data.frame(L1 = NULL)
for(i in 1:nrow(profileDataExpTrt)) {
if(i == 1) {
trt_lvls_df$L1 = df_in[[as.character(profileDataExpTrt[i,4])]]
trt_lvls_df$L1_level = df_in[[as.character(profileDataExpTrt[i,1])]]
} else {
}
i = 2
row_to_df <- data.frame(data = df_in[[as.character(profileDataExpTrt[i,4])]],
level = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
colnames(row_to_df) <- c(as.character(profileDataExpTrt[i,1]), as.character(profileDataExpTrt[i,3]))
trt_lvls_df <- cbind(trt_lvls_df, row_to_df)
}
#create treatment level dataframe to join with profileData
trt_lvls_df <- data.frame()
for(i in 1:nrow(profileDataExpTrt)) {
if(i == 1) {
trt_lvls_df$L1 = df_in[[as.character(profileDataExpTrt[i,4])]]
trt_lvls_df$L1_level = df_in[[as.character(profileDataExpTrt[i,1])]]
} else {
}
i = 2
row_to_df <- data.frame(data = df_in[[as.character(profileDataExpTrt[i,4])]],
level = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
colnames(row_to_df) <- c(as.character(profileDataExpTrt[i,1]), as.character(profileDataExpTrt[i,3]))
trt_lvls_df <- cbind(trt_lvls_df, row_to_df)
}
#create treatment level dataframe to join with profileData
for(i in 1:nrow(profileDataExpTrt)) {
if(i == 1) {
trt_lvls_df = data.frame(L1 = df_in[[as.character(profileDataExpTrt[i,4])]],
L1_level = df_in[[as.character(profileDataExpTrt[i,1])]])
} else {
}
i = 2
row_to_df <- data.frame(data = df_in[[as.character(profileDataExpTrt[i,4])]],
level = rep(as.character(profileDataExpTrt[i,1]), nrow(df_in)))
colnames(row_to_df) <- c(as.character(profileDataExpTrt[i,1]), as.character(profileDataExpTrt[i,3]))
trt_lvls_df <- cbind(trt_lvls_df, row_to_df)
}
df_in[[as.character(profileDataExpTrt[i,4])]]
df_in[[as.character(profileDataExpTrt[i,1])]]
#create treatment level dataframe to join with profileData
for(i in 1:nrow(profileDataExpTrt)) {
if(i == 1) {
trt_lvls_df = data.frame(L1 = df_in[[as.character(profileDataExpTrt[i,4])]],
L1_level = as.character(profileDataExpTrt[i,1]))
} else {
}
i = 2
row_to_df <- data.frame(data = df_in[[as.character(profileDataExpTrt[i,4])]],
level = as.character(profileDataExpTrt[i,1]))
colnames(row_to_df) <- c(as.character(profileDataExpTrt[i,1]), as.character(profileDataExpTrt[i,3]))
trt_lvls_df <- cbind(trt_lvls_df, row_to_df)
}
View(trt_lvls_df)
#create treatment level dataframe to join with profileData
for(i in 1:nrow(profileDataExpTrt)) {
if(i == 1) {
trt_lvls_df = data.frame(L1 = df_in[[as.character(profileDataExpTrt[i,4])]],
L1_level = as.character(profileDataExpTrt[i,1]))
} else {
}
i = 2
row_to_df <- data.frame(data = df_in[[as.character(profileDataExpTrt[i,4])]],
level = as.character(profileDataExpTrt[i,1]))
colnames(row_to_df) <- c(as.character(profileDataExpTrt[i,2]), as.character(profileDataExpTrt[i,3]))
trt_lvls_df <- cbind(trt_lvls_df, row_to_df)
}
#create treatment level dataframe to join with profileData
for(i in 1:nrow(profileDataExpTrt)) {
if(i == 1) {
trt_lvls_df = data.frame(L1 = df_in[[as.character(profileDataExpTrt[i,4])]],
L1_level = as.character(profileDataExpTrt[i,1]))
} else {
}
i = 2
row_to_df <- data.frame(data = df_in[[as.character(profileDataExpTrt[i,4])]],
level = as.character(profileDataExpTrt[i,1]))
colnames(row_to_df) <- c(as.character(profileDataExpTrt[i,2]), as.character(profileDataExpTrt[i,3]))
trt_lvls_df <- cbind(trt_lvls_df, row_to_df)
}
#create treatment level dataframe to join with profileData
for(i in 1:nrow(profileDataExpTrt)) {
if(i == 1) {
trt_lvls_df = data.frame(L1 = df_in[[as.character(profileDataExpTrt[i,4])]],
L1_level = as.character(profileDataExpTrt[i,1]))
} else {
row_to_df <- data.frame(data = df_in[[as.character(profileDataExpTrt[i,4])]],
level = as.character(profileDataExpTrt[i,1]))
colnames(row_to_df) <- c(as.character(profileDataExpTrt[i,2]), as.character(profileDataExpTrt[i,3]))
trt_lvls_df <- cbind(trt_lvls_df, row_to_df)
}
# loop through a given frame to add the corresponding levels for each
# experiment or treatment variable
for (i in 1:nrow(profileDataExpTrt)) {
#DEBUG
i = 1
newColName <- profileDataExpTrt[i,][['var_level']]
newColValue <- profileDataExpTrt[i,][['unit_levels']]
newPosition <- profileDataExpTrt[i,][['var']]
)
} # close loop
return(df_in)
}
#create treatment level dataframe to join with profileData
for(i in 1:nrow(profileDataExpTrt)) {
if(i == 1) {
trt_lvls_df = data.frame(L1 = df_in[[as.character(profileDataExpTrt[i,4])]],
L1_level = as.character(profileDataExpTrt[i,1]))
} else {
row_to_df <- data.frame(data = df_in[[as.character(profileDataExpTrt[i,4])]],
level = as.character(profileDataExpTrt[i,1]))
colnames(row_to_df) <- c(as.character(profileDataExpTrt[i,2]), as.character(profileDataExpTrt[i,3]))
trt_lvls_df <- cbind(trt_lvls_df, row_to_df)
}
# loop through a given frame to add the corresponding levels for each
# experiment or treatment variable
for (i in 1:nrow(profileDataExpTrt)) {
#DEBUG
i = 1
newColName <- profileDataExpTrt[i,][['var_level']]
newColValue <- profileDataExpTrt[i,][['unit_levels']]
newPosition <- profileDataExpTrt[i,][['var']]
)
} # close loop
return(df_in)
}
#create treatment level dataframe to join with profileData
for(i in 1:nrow(profileDataExpTrt)) {
if(i == 1) {
trt_lvls_df = data.frame(L1 = df_in[[as.character(profileDataExpTrt[i,4])]],
L1_level = as.character(profileDataExpTrt[i,1]))
} else {
row_to_df <- data.frame(data = df_in[[as.character(profileDataExpTrt[i,4])]],
level = as.character(profileDataExpTrt[i,1]))
colnames(row_to_df) <- c(as.character(profileDataExpTrt[i,2]), as.character(profileDataExpTrt[i,3]))
trt_lvls_df <- cbind(trt_lvls_df, row_to_df)
}
}
as.character(profileDataExpTrt[i,4])
#create treatment level dataframe to join with profileData
for(i in 1:nrow(profileDataExpTrt)) {
if(i == 1) {
trt_lvls_df = data.frame(L1 = df_in[[as.character(profileDataExpTrt[i,4])]],
L1_level = as.character(profileDataExpTrt[i,1]))
data_cols_replaced <- c(as.character(profileDataExpTrt[i,4]))
} else {
row_to_df <- data.frame(data = df_in[[as.character(profileDataExpTrt[i,4])]],
level = as.character(profileDataExpTrt[i,1]))
colnames(row_to_df) <- c(as.character(profileDataExpTrt[i,2]), as.character(profileDataExpTrt[i,3]))
trt_lvls_df <- cbind(trt_lvls_df, row_to_df)
data_cols_replaced <- c(data_cols_replaced, as.character(profileDataExpTrt[i,4]))
}
}
data_cols_replaced
x = df_in[ , -which(names(df_in) %in% data_cols_replaced)]
View(x)
df_out <- left_join(trt_lvls_df, df_in[ , -which(names(df_in) %in% data_cols_replaced)])
df_out <- cbind(trt_lvls_df, df_in[ , -which(names(df_in) %in% data_cols_replaced)])
View(df_out)
# Homog_apply
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("Homog_ftns.R")
data_dir <- "C:\\GitHub\\CZnetGM_SoDaH\\Homog\\Test_dir\\AND_10YR_CN"
key_path <- find_key_path(data_dir)
locationData <- read_key_location(key_path)
profileData <- read_key_profile(key_path)
notes <- build_key_notes(key_path, locationData, profileData)
unitsConversions <- get_unit_conversions(key_path)
conversionNotes <- build_unitConv_notes()
LDU_UCL <- locationData_to_convert(locationData, unitsConversions)
locUnitsConverted <- apply_locData_UnitConv(locationData, LDU_UCL, conversionNotes)
locationData <- as.data.frame(locUnitsConverted[[1]])
conversion_Notes <- as.data.frame(locUnitsConverted[[2]]) #output is notes
locationDataQC_Notes <- locationData_QC(locationData) #output is notes
data_to_homog <- collect_data_to_homog(data_dir, locationData)
data_to_homog_lvls <- add_exp_trt_levels(data_to_homog, profileData)
data_to_homog_w_lvls <- add_exp_trt_levels(data_to_homog, profileData)
View(data_to_homog_w_lvls)
